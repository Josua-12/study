package com.shopping.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.shopping.model.Admin;
import com.shopping.model.Order;
import com.shopping.model.User;
import com.shopping.repository.FileAdminRepository;
import com.shopping.repository.FileUserRepository;
import com.shopping.service.AuthService;
import com.shopping.service.UserService;

public class UserController {
	private UserService userService;
	private AuthService authService;
	private Scanner scanner;
	
	// 다른 컨트롤러들을 멤버 변수로 선언합니다.
	private ProductController productController;
	private CartController cartController;
	private List<Order> orders; // 주문 내역을 저장할 임시 저장소

	// UserController 생성자
	public UserController(UserService userService, AuthService authService, Scanner scanner) {
		this.userService = userService;
		this.authService = authService;
		this.scanner = scanner;
		this.orders = new ArrayList<>(); // 주문 내역 리스트 초기화
	}
	
	// 다른 컨트롤러 객체를 설정하는 메서드 (의존성 주입)
	public void setOtherControllers(ProductController productController, CartController cartController) {
		this.productController = productController;
		this.cartController = cartController;
	}

	// 로그인 성공 후 호출
	public void showShoppingUserMenu(User user) {
	    while (true) {
	        System.out.println("\n╔════════════════════════════════════════════╗");
	        System.out.println("║     🛍️  Java Shopping Mall                 ║");
	        System.out.println("║     환영합니다, " + user.getName() + "님!                  ║");
	        System.out.println("╚════════════════════════════════════════════╝\n");

	        System.out.println("1. 상품 둘러보기");
	        System.out.println("2. 상품 검색");
	        System.out.println("3. 장바구니 관리");
	        System.out.println("4. 주문하기");
	        System.out.println("5. 주문 내역");
	        System.out.println("6. 마이페이지");
	        System.out.println("7. 로그아웃");
	        System.out.print("\n메뉴를 선택하세요: ");

	        String choice = scanner.nextLine();
	        
	        switch (choice) {
            case "1":
            	browseProducts(); //상품 둘러보기
                break;
            case "2":
            	searchProducts(); // 상품 검색
                break;
            case "3":
            	manageCart(); // 장바구니 관리
                break;
            case "4":
            	Order(); // 주문하기
                break;
            case "5":
            	ByingList(); // 주문 내역
                break;
            case "6":
            	myPage(user); // user 객체를 넘겨주도록 수정
                break;
            case "7":
                logout(); // 로그아웃 처리
                return;   // 메뉴 종료
            default:
                System.out.println("잘못된 선택입니다.");
        }
    }
}

	private void logout() {
		Object nowLoginObj = authService.getLoggedInUser();
		if (nowLoginObj == null) {
			System.out.println("로그인된 사용자가 없습니다.");
			return;
		}
		
		String userName = (nowLoginObj instanceof User ? ((User)nowLoginObj).getName() : ((Admin)nowLoginObj).getName());
		authService.logout();
		System.out.println(userName + "님이 로그아웃되었습니다.");
	}

	// myPage 메서드 구현 (간단한 예시)
	// 기존 코드에서 myPage(session)을 myPage(user)로 수정했습니다.
	private void myPage(User user) {
		System.out.println("\n--- 마이페이지 ---");
		System.out.println("이름: " + user.getName());
		System.out.println("아이디: " + user.getId());
		
		System.out.println("-----------------");
	}

	private void manageCart() {
		if (cartController != null) {
			cartController.menu();      // 장바구니 메뉴 실행
		} else {
			System.out.println("장바구니 관리 기능을 사용할 수 없습니다.");
		}
	}

	private void searchProducts() {
		if (productController != null) {
			productController.search(); // 상품 검색 기능
		} else {
			System.out.println("상품 검색 기능을 사용할 수 없습니다.");
		}
	}

	private void browseProducts() {
		if (productController != null) {
			productController.list();   // 상품 목록 보여주기
		} else {
			System.out.println("상품 둘러보기 기능을 사용할 수 없습니다.");
		}
	}
	
	/**
     * @brief 장바구니에 담긴 상품을 주문하는 메서드.
     * 1. 현재 로그인된 사용자의 장바구니를 가져옵니다.
     * 2. 장바구니에 상품이 있는지 확인합니다.
     * 3. 주문 정보를 생성하고, 주문 내역 리스트에 추가합니다.
     * 4. 장바구니를 비웁니다.
     */
	private void Order() {
		User currentUser = (User) authService.getLoggedInUser();
		if (currentUser == null) {
			System.out.println("로그인 후 이용해 주세요.");
			return;
		}
		
		// 장바구니에 상품이 있는지 확인
		List<CartItem> cartItems = cartController.getCartItems(currentUser);
		if (cartItems.isEmpty()) {
			System.out.println("장바구니가 비어 있어 주문할 수 없습니다.");
			return;
		}
		
		System.out.println("\n--- 주문하기 ---");
		System.out.println("주문하실 상품 목록:");
		double totalAmount = 0;
		for (CartItem item : cartItems) {
			System.out.printf("- %s (%d개) - %,.0f원\n", item.getProduct().getName(), item.getQuantity(), item.getTotalPrice());
			totalAmount += item.getTotalPrice();
		}
		System.out.println("총 결제 금액: " + (int)totalAmount + "원");
		System.out.print("주문하시겠습니까? (Y/N): ");
		String confirm = scanner.nextLine();
		
		if (confirm.equalsIgnoreCase("Y")) {
			// 주문 번호 생성 (간단한 예시)
			String orderId = "ORD-" + System.currentTimeMillis();
			// 새로운 주문 객체 생성
			Order newOrder = new Order(orderId, currentUser.getId(), cartItems, totalAmount);
			// 주문 내역 리스트에 추가
			orders.add(newOrder);
			
			// 장바구니 비우기
			cartController.clearCart(currentUser);
			
			System.out.println("\n✅ 주문이 성공적으로 완료되었습니다!");
			System.out.println("주문 번호: " + orderId);
		} else {
			System.out.println("주문이 취소되었습니다.");
		}
	}

	/**
     * @brief 로그인된 사용자의 주문 내역을 조회하고 출력하는 메서드.
     * 1. 현재 로그인된 사용자의 주문 내역을 필터링합니다.
     * 2. 주문이 없으면 메시지를 출력합니다.
     * 3. 주문 내역을 순회하며 상세 정보를 출력합니다.
     */
	private void ByingList() {
		User currentUser = (User) authService.getLoggedInUser();
		if (currentUser == null) {
			System.out.println("로그인 후 이용해 주세요.");
			return;
		}
		
		// 현재 사용자의 주문 내역만 필터링
		List<Order> userOrders = new ArrayList<>();
		for (Order order : orders) {
			if (order.getUserId().equals(currentUser.getId())) {
				userOrders.add(order);
			}
		}
		
		System.out.println("\n--- " + currentUser.getName() + "님의 주문 내역 ---");
		if (userOrders.isEmpty()) {
			System.out.println("주문 내역이 없습니다.");
		} else {
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
			
			for (Order order : userOrders) {
				System.out.println("------------------------------------");
				System.out.println("주문 번호: " + order.getOrderId());
				System.out.println("주문 날짜: " + order.getOrderDate().format(formatter));
				System.out.println("총 결제 금액: " + (int)order.getTotalAmount() + "원");
				System.out.println("상품 목록:");
				for (CartItem item : order.getItems()) {
					System.out.printf("  - %s (%d개) - %,.0f원\n", item.getProduct().getName(), item.getQuantity(), item.getTotalPrice());
				}
			}
			System.out.println("------------------------------------");
		}
	}
}
