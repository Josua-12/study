1. 오류(error)
    1) 컴파일 오류 (compile error)
        - 개발자가 코드를 작성할 때 문법적 실수 등으로 인해 발생함
        - 컴파일러가 소스 코드를 바이트 코드로 변환하지 못함
            - 예) 세미콜론 ; 빠짐, 변수 선언 누락 등
    2) 실행 오류 (runtime error)
        - 프로그램 실행 도중 발생하는 오류
        - 의도하지 않은 동작이 발생하거나 프로그램이 강제 종료되는 현상
        - 프로그램은 실행되지만, 구현이 잘못되어 잘못된 결과나 예기치 못한 문제가 발생
          => 버그(bug)
        - 로그(log)를 남기면 원인 파악 및 디버깅에 도움됨

2. 실행 오류 (runtime error)
    1) 자바 가상 머신(JVM)에서 발생하는 시스템 오류 (error) - 시스템 수준의 심각한 오류
        - 예)
            - 동적 메모리가 없는 경우
            - 스택 메모리의 오버플로우가 발생한 경우
        - 보통 개발자가 직접 제어하거나 처리할 수 없음
    2) 예외 (exception) - 프로그램에서 처리 가능한 오류
        - 프로그램 실행 중 발견하지만, 개발자가 직접 처리할 수 있음
        - 예) 
            - 없는 파일을 열려고 시도할 때
            - 네트워크 연결이 끊긴 상태에서 데이터 전송 시도
            - 배열값을 출력하려는데 배열 요소가 없는 경우
        - 예외 처리를 통해 프로그램이 중단되지 않도록 제어 가능(try-catch문 등 사용)
    3) 오류 처리하는 클래스
        - Class Thorwable
        - Class error
        - Class Exception

3. 예외 클래스 (Class Exception)
    1) Class Exception 

        Class IOException                                          Class RuntimeException

        Class FileNotFountException     Class SoketException      Class ArthimeticException      Class IndexOutOfBoundsException

4. 예외 처리의 중요성
    1) 프로그램의 비정상 종료를 피하여 시스템이 원활히 실행되도록 함
    2) 실행 오류가 발생한 경우의 오류의 과정을 재현하는 것은 현실적으로 힘듦
    3) 오류가 발생한 경우 log를 남겨서 추후 log 분석을 통해 그 원인을 파악하여 bug를 수정하는 것이 중요함

5. 예외 처리하기 
    1) try~catch문으로 예외 처리하기 
       - try {
              예외가 발생할 수 있는 코드 부분
          } catch(처리할 예외 타입 e) {
              try 블록 안에서 예외가 발생했을 때 이를 처리하는 부분
          } 
    2) try~catch-finally 문
        - 프로그램에서 사용한 리소스는 프로그램이 종료되면 자동으로 해제해야 함
        - 시스템에서 허용하는 자원은 한계가 있기 때문임
        - try {
              예외가 발생할 수 있는 코드 부분
          } catch(처리할 예외 타입 e) {
              try 블록 안에서 예외가 발생했을 때 이를 처리하는 부분
          } finally {
              항상 수행되는 부분
          }
    3) try-with-resources 문
        - close() 메서드를 명시적으로 호출하지 않아도 try 블록 내에서 열린 리소스를 자동으로 닫도록 만들 수 있음
        - Interface AutoCloseable를 구현해야 함
        - try(A a = new A(); B b = new B()) {

          } catch(Exception e) {

          }
        - 리소스를 try() 내부에서 선언해야 함
        - 자바 7부터 제공함
        - 자바 9부터 try()문의 괄호 안에서 외부에서 선언한 변수를 사용할 수 있게 개선됨

    4) 예외 처리 미루기
        - throws로 예외 처리 미루기

6. 사용자 정의 예외 클래스 구현하기
    1) 기존 JDK에서 제공하는 예외 클래스 중 가장 유사한 클래스를 상속받아 구현하는 것이 좋음
    2) 잘 모르겠다면 가장 상위 클래스인 EXception 클래스에서 상속받음
    