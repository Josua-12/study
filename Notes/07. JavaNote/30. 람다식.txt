1. 프로그래밍 방법론
    1) 절차적 프로그래밍
        - 순차적인 명령을 수행하고 간단한 분기만 가능
    2) 구조적 프로그래밍
        - 특정 변수들을 하나의 구조로 묶어 객체로 구성하고, 이를 통해 코드의 재사용성과 유지보수성을 
          높여 프로그래밍 효율을 향상시킴
    3) 객체지향 프로그래밍 
        - 현실 세계를 기반으로 클래스, 속성, 기능(메서드) 등을 이용해 객체를 모델링하고, 
          이를 바탕으로 프로그래밍하는 방식
    4) 함수형 프로그래밍 
        - 객체의 형태를 벗어나 함수형을 확장해 함수를 변수처럼 사용 가능
        - 함수를 간결하게 표현 -> 코드의 재사용성, 가독성 높임

2. 명령형 프로그래밍 vs 선언적 프로그래밍 
    1) Imperative Programming(명령형 프로그래밍)
        - 대표적인 예) 객체 지향 프로그래밍(OOP) 
        - 어떻게(HOW) 해결할 것인가에 중점을 둠 => 절차 중심
        - 개발자가 구체적인 실행 흐름과 절차를 직접 명시함
    2) Declarative Programming(선언적 프로그래밍)
        - 대표적인 예) 함수형 프로그래밍(Functional Programming), SQL
        - 무엇(WHAT)을 해야 하는가에 중점을 둠
        - 결과에 집중하며, 실행 방법은 추상화 됨

3. First-Class Citizen (1급 시민) 조건 
    1) 매개변수(parameter)로서 전달할 수 있는가?
    2) 반환값(return)이 될 수 있는가?
    3) 변수에 담을 수 있는가?

4. 함수형 프로그래밍과 람다식
    1) 전통적인 객체 지향 방식에서는
        - 클래스가 없으면 메서드를 정의하거나 호출할 수 없으며,
        - 반드시 객체를 생성한 후에야 메서드를 사용할 수 있음
            - 메서드는 객체에 종속적
    2) 함수형 프로그래밍(Functional Programming: FP)
        - 함수의 구현과 호출만으로 프로그램을 만드는 방식
        - 상태 변화 없이, 순수 함수 중심으로 동작함
        - 자바 8부터 지원하고 있음
            - 이때 사용하는 문법이 람다식(Lambda Expression)임
            - 람다식은 익명 함수를 간결하게 표현하는 방식으로, 코드의 간결성, 가독성, 재사용성을 높여줌
    3) 순수 함수(pure function)를 구현하고 호출
        - 외부 상태나 자료에 영향(side effect)을 주지 않고, 부수 효과(side effect)가 없음
        - 함수 내부에서 함수 외부에 있는 변수나 상태를 참조하거나 변경하지 않음
            - 따라서, 같은 입력값에 대해 항상 같은 결과를 반환함
            - 테스트와 디버깅이 쉬워지고, 프로그램 예측 가능성이 높아짐

5. 람다식 문법
    1) 함수 이름이 없는 익명 함수를 만듦
    2) 람다식 기본 형태 : (매개변수) -> {실행문;}
        - 매개변수가 하나일 경우 괄호 생략 가능
        - 실행문이 한 줄이면 중괄호 및 return 생략 가능
        - 예
            int add(int x, int y) {
                return x + y;
            }
            ===> (int x, int y) -> {return x + y;}
    3) 매개변수 자료형과 괄호 생략하기
        - 매개변수 자료형은 생략 가능함
            - 컴파일러가 타입을 추론할 수 있기 때문
        - 매개변수가 하나인 경우 괄호도 생략 가능함
            - 단 자료형을 생략한 경우에만 괄호 생략 가능
        - 예:
            str -> {System.out.println(str);}
            x, y -> {System.out.println(str);}  <--- 오류남
    4) 중괄호 생략하기
        - 중괄호 안의 구현부가 한 문장인 경우 중괄호 생략 가능
        - 예:
            str -> {System.out.println(str);}
            ===> str -> System.out.println(str);
        - 단, 중괄호 안의 구현부가 한 문장이더라도 return문이라면 중괄호 생략 불가함 
        - 예:
            str -> return str.length();  <--- 오류남
    5) return 생략하기
        - 람다식의 구현부가 return문 하나만 있을 때는,
        - 중괄호 {}와 return 키워드 모두 생략하고, 표현식(식)만 작성할 수 있다.
        - 예:
            (x, y) -> {return x + y;}
            ===> (x, y) -> x + y;            // 두 값을 더하여 반환함
            str -> str.length()              // 문자열의 길이를 반환함

6. 람다식 구현하기
    1) 람다식을 구현하려면 먼저 인터페이스를 만들어야 함
    2) 인터페이스에 람다식으로 구현할 메서드를 선언해야 함
        => 함수형 인터페이스

7. 함수형 인터페이스    
    1) 인터페이스에 두 개 이상의 메서드가 있어서는 안됨
    2) 람다식은 이름이 없는 익명 함수로 구현하기 때문에 메서드가 여러 개 있다면 어떤 메서드를 구현한 것인지 모호해짐
       => 람다식은 오직 하나의 메서드만 선언한 인터페이스를 구현할 수 있음
    3) @FunctionalInterface 애너테이션
        - 함수형 인터페이스라는 의미
        - 추상 메서드를 하나만 선언할 수 있으며, 두 개 이상 선언하면 오류 발생함

8. 객체 지향 프로그래밍 방식과 람다식 비교

9. 함수를 변수처럼 사용하는 람다식
   1) 인터페이스형 변수에 람다식 대입하기
   2) 매개변수로 전달되는 람다식
   3) 반환값으로 쓰이는 람다식